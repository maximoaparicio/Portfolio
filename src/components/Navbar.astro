---
import MenuToggle from "./MenuToggle.astro";
import ThemeToggle from "./ThemeToggle.astro";
import UppercaseToggle from "./UppercaseToggle.astro";
import LanguagePicker from "@/components/LanguagePicker.astro";
import { navItems } from "@/lib/index";

import {
  getLangFromUrl,
  useTranslations,
  useTranslatedPath,
} from "../i18n/utils";

const lang = getLangFromUrl(Astro.url);
const t = useTranslations(lang);
const translatePath = useTranslatedPath(lang);
---

<header class="sticky">
  <nav class="flex items-center justify-between">
    <ul class="flex">
      <li>
        <a href={translatePath("/experience/")}>
          {t("nav.experience")}
        </a>
      </li>
      <li>
        <a href={translatePath("/projects/")}>
          {t("nav.projects")}
        </a>
      </li>
      <li>
        <a href={translatePath("/about/")}>
          {t("nav.about")}
        </a>
      </li>
      <li>
        <a href={translatePath("/contact/")}>
          {t("nav.contact")}
        </a>
      </li>
    </ul>
    <div>
      <MenuToggle />
      <UppercaseToggle />
      <LanguagePicker />
      <ThemeToggle />
    </div>
  </nav>
  <!-- <div class="hidden" id="responsiveMenu">
    <nav class="navbar fixed top-16 right-0 left-0 w-fit m-auto sm:hidden">
      {
        navItems.map((link) => (
          <a
            class="relative block p-2
          hover:text-aqua2 dark:hover:text-aqua text-sm"
            aria-label={link.label}
            href={link.url}
          >
            {link.title}
          </a>
        ))
      }
    </nav>
  </div> -->
</header>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("dark:text-aqua text-aqua2");
            } else {
              item.classList.remove("dark:text-aqua text-aqua2");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
